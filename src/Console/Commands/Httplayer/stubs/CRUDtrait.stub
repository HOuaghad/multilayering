<?php

namespace App\Http\Traits;

use View;
use Input;
use Lang;
use Redirect;

/*
 |/////////////////////////////////////////////////////

 |  This trait contains all the basic crud actions 
 
 |  Each motor uses this trait by default.

 | `this` refers to the implementing motor.
 
 |////////////////////////////////////////////////////
 */


trait CRUDtrait
{

	public function index()
	{
		$all = $this->repository->all();
		return View::make($this->view.'.index', ['all' => $all]);
	}


	public function create()
	{
		return view($this->view.'.create');
	}


	public function show($id)
	{
		if( ! ( $instance = $this->model->find($id) ))
		{
			return Redirect::to($this->routePrefix.'.'.$this->views.'.index')->with([ 'all' => $this->repository->all() ]);
		}

		return view($this->view.'.show', ['instance' => $instance]);
	}

	public function store()
	{
		$attributes = $this->repository->attributes;
		$data       = getInput($attributes);

		if( !( $this->repository->create($data) ) )
		{
			return view($this->view.'.create');
		}

		return Redirect::to($this->routePrefix.'.'.$this->modelName.'.create')->with(['all' => $this->repository->all()]);

	}


	public function edit($id)
	{
		return view($this->view.'.edit', ['instance' => $this->repository->find($id)]);
	}


	public function update($id)
	{
		$attributes = $this->repository->attributes;
		$data = getInput($attributes);

		if( !($this->repository->update($id, $data)) )
		{
			return $this->index();
		}

		return Redirect::to($this->routePrefix.'.'.$this->modelName.'.index')->with(['all' => $this->repository->all()]);
	}

	public function delete($id)
	{
		return view($this->view.'.delete', ['instance' => $this->repository->find($id)]);
	}

	public function destroy($id)
	{
		$instance  = $this->repository->find($id);
		
		if( !( $instance->destroy($id) ) )
		{
			return $this->index();
		}

		return Redirect::to($this->routePrefix.'.'.$this->modelName.'.index')->with(['all' => $this->repository->all()]);
	}

}